const c = @cImport(@cInclude("SDL.h"));
const std = @import("std");

comptime { std.debug.assert(@sizeOf(Keycode) == @sizeOf(c.SDL_Keycode)); }

pub const Keycode = enum(u32) {
    unknown            = c.SDLK_UNKNOWN,

    return_            = c.SDLK_RETURN,
    escape             = c.SDLK_ESCAPE,
    backspace          = c.SDLK_BACKSPACE,
    tab                = c.SDLK_TAB,
    space              = c.SDLK_SPACE,
    exclaim            = c.SDLK_EXCLAIM,
    quotedbl           = c.SDLK_QUOTEDBL,
    hash               = c.SDLK_HASH,
    percent            = c.SDLK_PERCENT,
    dollar             = c.SDLK_DOLLAR,
    ampersand          = c.SDLK_AMPERSAND,
    quote              = c.SDLK_QUOTE,
    leftparen          = c.SDLK_LEFTPAREN,
    rightparen         = c.SDLK_RIGHTPAREN,
    asterisk           = c.SDLK_ASTERISK,
    plus               = c.SDLK_PLUS,
    comma              = c.SDLK_COMMA,
    minus              = c.SDLK_MINUS,
    period             = c.SDLK_PERIOD,
    slash              = c.SDLK_SLASH,
    digit0             = c.SDLK_0,
    digit1             = c.SDLK_1,
    digit2             = c.SDLK_2,
    digit3             = c.SDLK_3,
    digit4             = c.SDLK_4,
    digit5             = c.SDLK_5,
    digit6             = c.SDLK_6,
    digit7             = c.SDLK_7,
    digit8             = c.SDLK_8,
    digit9             = c.SDLK_9,
    colon              = c.SDLK_COLON,
    semicolon          = c.SDLK_SEMICOLON,
    less               = c.SDLK_LESS,
    equals             = c.SDLK_EQUALS,
    greater            = c.SDLK_GREATER,
    question           = c.SDLK_QUESTION,
    at                 = c.SDLK_AT,
    leftbracket        = c.SDLK_LEFTBRACKET,
    backslash          = c.SDLK_BACKSLASH,
    rightbracket       = c.SDLK_RIGHTBRACKET,
    caret              = c.SDLK_CARET,
    underscore         = c.SDLK_UNDERSCORE,
    backquote          = c.SDLK_BACKQUOTE,

    // Note: uppercase letters are represented with a shift modifier.
    a                  = c.SDLK_a,
    b                  = c.SDLK_b,
    c                  = c.SDLK_c,
    d                  = c.SDLK_d,
    e                  = c.SDLK_e,
    f                  = c.SDLK_f,
    g                  = c.SDLK_g,
    h                  = c.SDLK_h,
    i                  = c.SDLK_i,
    j                  = c.SDLK_j,
    k                  = c.SDLK_k,
    l                  = c.SDLK_l,
    m                  = c.SDLK_m,
    n                  = c.SDLK_n,
    o                  = c.SDLK_o,
    p                  = c.SDLK_p,
    q                  = c.SDLK_q,
    r                  = c.SDLK_r,
    s                  = c.SDLK_s,
    t                  = c.SDLK_t,
    u                  = c.SDLK_u,
    v                  = c.SDLK_v,
    w                  = c.SDLK_w,
    x                  = c.SDLK_x,
    y                  = c.SDLK_y,
    z                  = c.SDLK_z,

    capslock           = c.SDLK_CAPSLOCK,

    f1                 = c.SDLK_F1,
    f2                 = c.SDLK_F2,
    f3                 = c.SDLK_F3,
    f4                 = c.SDLK_F4,
    f5                 = c.SDLK_F5,
    f6                 = c.SDLK_F6,
    f7                 = c.SDLK_F7,
    f8                 = c.SDLK_F8,
    f9                 = c.SDLK_F9,
    f10                = c.SDLK_F10,
    f11                = c.SDLK_F11,
    f12                = c.SDLK_F12,

    printscreen        = c.SDLK_PRINTSCREEN,
    scrolllock         = c.SDLK_SCROLLLOCK,
    pause              = c.SDLK_PAUSE,
    insert             = c.SDLK_INSERT,
    home               = c.SDLK_HOME,
    pageup             = c.SDLK_PAGEUP,
    delete_            = c.SDLK_DELETE,
    end                = c.SDLK_END,
    pagedown           = c.SDLK_PAGEDOWN,
    right              = c.SDLK_RIGHT,
    left               = c.SDLK_LEFT,
    down               = c.SDLK_DOWN,
    up                 = c.SDLK_UP,

    numlockclear       = c.SDLK_NUMLOCKCLEAR,
    kp_divide          = c.SDLK_KP_DIVIDE,
    kp_multiply        = c.SDLK_KP_MULTIPLY,
    kp_minus           = c.SDLK_KP_MINUS,
    kp_plus            = c.SDLK_KP_PLUS,
    kp_enter           = c.SDLK_KP_ENTER,
    kp_1               = c.SDLK_KP_1,
    kp_2               = c.SDLK_KP_2,
    kp_3               = c.SDLK_KP_3,
    kp_4               = c.SDLK_KP_4,
    kp_5               = c.SDLK_KP_5,
    kp_6               = c.SDLK_KP_6,
    kp_7               = c.SDLK_KP_7,
    kp_8               = c.SDLK_KP_8,
    kp_9               = c.SDLK_KP_9,
    kp_0               = c.SDLK_KP_0,
    kp_period          = c.SDLK_KP_PERIOD,

    application        = c.SDLK_APPLICATION,
    power              = c.SDLK_POWER,
    kp_equals          = c.SDLK_KP_EQUALS,
    f13                = c.SDLK_F13,
    f14                = c.SDLK_F14,
    f15                = c.SDLK_F15,
    f16                = c.SDLK_F16,
    f17                = c.SDLK_F17,
    f18                = c.SDLK_F18,
    f19                = c.SDLK_F19,
    f20                = c.SDLK_F20,
    f21                = c.SDLK_F21,
    f22                = c.SDLK_F22,
    f23                = c.SDLK_F23,
    f24                = c.SDLK_F24,
    execute            = c.SDLK_EXECUTE,
    help               = c.SDLK_HELP,
    menu               = c.SDLK_MENU,
    select             = c.SDLK_SELECT,
    stop               = c.SDLK_STOP,
    again              = c.SDLK_AGAIN,
    undo               = c.SDLK_UNDO,
    cut                = c.SDLK_CUT,
    copy               = c.SDLK_COPY,
    paste              = c.SDLK_PASTE,
    find               = c.SDLK_FIND,
    mute               = c.SDLK_MUTE,
    volumeup           = c.SDLK_VOLUMEUP,
    volumedown         = c.SDLK_VOLUMEDOWN,
    kp_comma           = c.SDLK_KP_COMMA,
    kp_equalsas400     = c.SDLK_KP_EQUALSAS400,

    alterase           = c.SDLK_ALTERASE,
    sysreq             = c.SDLK_SYSREQ,
    cancel             = c.SDLK_CANCEL,
    clear              = c.SDLK_CLEAR,
    prior              = c.SDLK_PRIOR,
    return2            = c.SDLK_RETURN2,
    separator          = c.SDLK_SEPARATOR,
    out                = c.SDLK_OUT,
    oper               = c.SDLK_OPER,
    clearagain         = c.SDLK_CLEARAGAIN,
    crsel              = c.SDLK_CRSEL,
    exsel              = c.SDLK_EXSEL,

    kp_00              = c.SDLK_KP_00,
    kp_000             = c.SDLK_KP_000,
    thousandsseparator = c.SDLK_THOUSANDSSEPARATOR,
    decimalseparator   = c.SDLK_DECIMALSEPARATOR,
    currencyunit       = c.SDLK_CURRENCYUNIT,
    currencysubunit    = c.SDLK_CURRENCYSUBUNIT,
    kp_leftparen       = c.SDLK_KP_LEFTPAREN,
    kp_rightparen      = c.SDLK_KP_RIGHTPAREN,
    kp_leftbrace       = c.SDLK_KP_LEFTBRACE,
    kp_rightbrace      = c.SDLK_KP_RIGHTBRACE,
    kp_tab             = c.SDLK_KP_TAB,
    kp_backspace       = c.SDLK_KP_BACKSPACE,
    kp_a               = c.SDLK_KP_A,
    kp_b               = c.SDLK_KP_B,
    kp_c               = c.SDLK_KP_C,
    kp_d               = c.SDLK_KP_D,
    kp_e               = c.SDLK_KP_E,
    kp_f               = c.SDLK_KP_F,
    kp_xor             = c.SDLK_KP_XOR,
    kp_power           = c.SDLK_KP_POWER,
    kp_percent         = c.SDLK_KP_PERCENT,
    kp_less            = c.SDLK_KP_LESS,
    kp_greater         = c.SDLK_KP_GREATER,
    kp_ampersand       = c.SDLK_KP_AMPERSAND,
    kp_dblampersand    = c.SDLK_KP_DBLAMPERSAND,
    kp_verticalbar     = c.SDLK_KP_VERTICALBAR,
    kp_dblverticalbar  = c.SDLK_KP_DBLVERTICALBAR,
    kp_colon           = c.SDLK_KP_COLON,
    kp_hash            = c.SDLK_KP_HASH,
    kp_space           = c.SDLK_KP_SPACE,
    kp_at              = c.SDLK_KP_AT,
    kp_exclam          = c.SDLK_KP_EXCLAM,
    kp_memstore        = c.SDLK_KP_MEMSTORE,
    kp_memrecall       = c.SDLK_KP_MEMRECALL,
    kp_memclear        = c.SDLK_KP_MEMCLEAR,
    kp_memadd          = c.SDLK_KP_MEMADD,
    kp_memsubtract     = c.SDLK_KP_MEMSUBTRACT,
    kp_memmultiply     = c.SDLK_KP_MEMMULTIPLY,
    kp_memdivide       = c.SDLK_KP_MEMDIVIDE,
    kp_plusminus       = c.SDLK_KP_PLUSMINUS,
    kp_clear           = c.SDLK_KP_CLEAR,
    kp_clearentry      = c.SDLK_KP_CLEARENTRY,
    kp_binary          = c.SDLK_KP_BINARY,
    kp_octal           = c.SDLK_KP_OCTAL,
    kp_decimal         = c.SDLK_KP_DECIMAL,
    kp_hexadecimal     = c.SDLK_KP_HEXADECIMAL,

    lctrl              = c.SDLK_LCTRL,
    lshift             = c.SDLK_LSHIFT,
    lalt               = c.SDLK_LALT,
    lgui               = c.SDLK_LGUI,
    rctrl              = c.SDLK_RCTRL,
    rshift             = c.SDLK_RSHIFT,
    ralt               = c.SDLK_RALT,
    rgui               = c.SDLK_RGUI,

    mode               = c.SDLK_MODE,

    audionext          = c.SDLK_AUDIONEXT,
    audioprev          = c.SDLK_AUDIOPREV,
    audiostop          = c.SDLK_AUDIOSTOP,
    audioplay          = c.SDLK_AUDIOPLAY,
    audiomute          = c.SDLK_AUDIOMUTE,
    mediaselect        = c.SDLK_MEDIASELECT,
    www                = c.SDLK_WWW,
    mail               = c.SDLK_MAIL,
    calculator         = c.SDLK_CALCULATOR,
    computer           = c.SDLK_COMPUTER,
    ac_search          = c.SDLK_AC_SEARCH,
    ac_home            = c.SDLK_AC_HOME,
    ac_back            = c.SDLK_AC_BACK,
    ac_forward         = c.SDLK_AC_FORWARD,
    ac_stop            = c.SDLK_AC_STOP,
    ac_refresh         = c.SDLK_AC_REFRESH,
    ac_bookmarks       = c.SDLK_AC_BOOKMARKS,

    brightnessdown     = c.SDLK_BRIGHTNESSDOWN,
    brightnessup       = c.SDLK_BRIGHTNESSUP,
    displayswitch      = c.SDLK_DISPLAYSWITCH,
    kbdillumtoggle     = c.SDLK_KBDILLUMTOGGLE,
    kbdillumdown       = c.SDLK_KBDILLUMDOWN,
    kbdillumup         = c.SDLK_KBDILLUMUP,
    eject              = c.SDLK_EJECT,
    sleep              = c.SDLK_SLEEP,
    app1               = c.SDLK_APP1,
    app2               = c.SDLK_APP2,

    audiorewind        = c.SDLK_AUDIOREWIND,
    audiofastforward   = c.SDLK_AUDIOFASTFORWARD,
};
